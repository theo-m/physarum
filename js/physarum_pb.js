// source: physarum.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.physarium.AgentConfig', null, global);
goog.exportSymbol('proto.physarium.Config', null, global);
goog.exportSymbol('proto.physarium.Config.InitDistribution', null, global);
goog.exportSymbol('proto.physarium.Event', null, global);
goog.exportSymbol('proto.physarium.Event.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.physarium.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.physarium.Config.repeatedFields_, null);
};
goog.inherits(proto.physarium.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.physarium.Config.displayName = 'proto.physarium.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.physarium.AgentConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.physarium.AgentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.physarium.AgentConfig.displayName = 'proto.physarium.AgentConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.physarium.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.physarium.Event.oneofGroups_);
};
goog.inherits(proto.physarium.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.physarium.Event.displayName = 'proto.physarium.Event';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.physarium.Config.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.physarium.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.physarium.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.physarium.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    particles: jspb.Message.getFieldWithDefault(msg, 3, 0),
    iterations: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blurRadius: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blurPasses: jspb.Message.getFieldWithDefault(msg, 6, 0),
    zoomFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    agentsList: jspb.Message.toObjectList(msg.getAgentsList(),
    proto.physarium.AgentConfig.toObject, includeInstance),
    interactionMatrixList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f,
    idist: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.physarium.Config}
 */
proto.physarium.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.physarium.Config;
  return proto.physarium.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.physarium.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.physarium.Config}
 */
proto.physarium.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticles(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIterations(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlurRadius(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlurPasses(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoomFactor(value);
      break;
    case 9:
      var value = new proto.physarium.AgentConfig;
      reader.readMessage(value,proto.physarium.AgentConfig.deserializeBinaryFromReader);
      msg.addAgents(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setInteractionMatrixList(value);
      break;
    case 11:
      var value = /** @type {!proto.physarium.Config.InitDistribution} */ (reader.readEnum());
      msg.setIdist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.physarium.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.physarium.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.physarium.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParticles();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getIterations();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBlurRadius();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBlurPasses();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getZoomFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAgentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.physarium.AgentConfig.serializeBinaryToWriter
    );
  }
  f = message.getInteractionMatrixList();
  if (f.length > 0) {
    writer.writePackedFloat(
      10,
      f
    );
  }
  f = message.getIdist();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.physarium.Config.InitDistribution = {
  UNK: 0,
  UNIFORM: 1,
  CENTROIDS: 2,
  CENTRE: 3,
  GRID: 4
};

/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.physarium.Config.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.physarium.Config.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 particles = 3;
 * @return {number}
 */
proto.physarium.Config.prototype.getParticles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setParticles = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 iterations = 4;
 * @return {number}
 */
proto.physarium.Config.prototype.getIterations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setIterations = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 blur_radius = 5;
 * @return {number}
 */
proto.physarium.Config.prototype.getBlurRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setBlurRadius = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 blur_passes = 6;
 * @return {number}
 */
proto.physarium.Config.prototype.getBlurPasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setBlurPasses = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float zoom_factor = 7;
 * @return {number}
 */
proto.physarium.Config.prototype.getZoomFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setZoomFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * repeated AgentConfig agents = 9;
 * @return {!Array<!proto.physarium.AgentConfig>}
 */
proto.physarium.Config.prototype.getAgentsList = function() {
  return /** @type{!Array<!proto.physarium.AgentConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.physarium.AgentConfig, 9));
};


/**
 * @param {!Array<!proto.physarium.AgentConfig>} value
 * @return {!proto.physarium.Config} returns this
*/
proto.physarium.Config.prototype.setAgentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.physarium.AgentConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.physarium.AgentConfig}
 */
proto.physarium.Config.prototype.addAgents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.physarium.AgentConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.clearAgentsList = function() {
  return this.setAgentsList([]);
};


/**
 * repeated float interaction_matrix = 10;
 * @return {!Array<number>}
 */
proto.physarium.Config.prototype.getInteractionMatrixList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setInteractionMatrixList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.addInteractionMatrix = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.clearInteractionMatrixList = function() {
  return this.setInteractionMatrixList([]);
};


/**
 * optional InitDistribution idist = 11;
 * @return {!proto.physarium.Config.InitDistribution}
 */
proto.physarium.Config.prototype.getIdist = function() {
  return /** @type {!proto.physarium.Config.InitDistribution} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.physarium.Config.InitDistribution} value
 * @return {!proto.physarium.Config} returns this
 */
proto.physarium.Config.prototype.setIdist = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.physarium.AgentConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.physarium.AgentConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.physarium.AgentConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.AgentConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    sensorDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rotationAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    stepDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    depositionAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    decayFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    color: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.physarium.AgentConfig}
 */
proto.physarium.AgentConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.physarium.AgentConfig;
  return proto.physarium.AgentConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.physarium.AgentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.physarium.AgentConfig}
 */
proto.physarium.AgentConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSensorAngle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSensorDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationAngle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStepDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDepositionAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDecayFactor(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.physarium.AgentConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.physarium.AgentConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.physarium.AgentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.AgentConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSensorDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRotationAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getStepDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getDepositionAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getDecayFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional float sensor_angle = 1;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getSensorAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setSensorAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float sensor_distance = 2;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getSensorDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setSensorDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float rotation_angle = 3;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getRotationAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setRotationAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float step_distance = 4;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getStepDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setStepDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float deposition_amount = 5;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getDepositionAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setDepositionAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float decay_factor = 6;
 * @return {number}
 */
proto.physarium.AgentConfig.prototype.getDecayFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setDecayFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string color = 7;
 * @return {string}
 */
proto.physarium.AgentConfig.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.physarium.AgentConfig} returns this
 */
proto.physarium.AgentConfig.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.physarium.Event.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.physarium.Event.ContentCase = {
  CONTENT_NOT_SET: 0,
  PICTURE: 1,
  VIDEO: 2,
  STEP: 3
};

/**
 * @return {proto.physarium.Event.ContentCase}
 */
proto.physarium.Event.prototype.getContentCase = function() {
  return /** @type {proto.physarium.Event.ContentCase} */(jspb.Message.computeOneofCase(this, proto.physarium.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.physarium.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.physarium.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.physarium.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    picture: msg.getPicture_asB64(),
    video: msg.getVideo_asB64(),
    step: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.physarium.Event}
 */
proto.physarium.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.physarium.Event;
  return proto.physarium.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.physarium.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.physarium.Event}
 */
proto.physarium.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPicture(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVideo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.physarium.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.physarium.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.physarium.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.physarium.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes picture = 1;
 * @return {!(string|Uint8Array)}
 */
proto.physarium.Event.prototype.getPicture = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes picture = 1;
 * This is a type-conversion wrapper around `getPicture()`
 * @return {string}
 */
proto.physarium.Event.prototype.getPicture_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPicture()));
};


/**
 * optional bytes picture = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPicture()`
 * @return {!Uint8Array}
 */
proto.physarium.Event.prototype.getPicture_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPicture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.setPicture = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.physarium.Event.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.clearPicture = function() {
  return jspb.Message.setOneofField(this, 1, proto.physarium.Event.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.physarium.Event.prototype.hasPicture = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes video = 2;
 * @return {!(string|Uint8Array)}
 */
proto.physarium.Event.prototype.getVideo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes video = 2;
 * This is a type-conversion wrapper around `getVideo()`
 * @return {string}
 */
proto.physarium.Event.prototype.getVideo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVideo()));
};


/**
 * optional bytes video = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVideo()`
 * @return {!Uint8Array}
 */
proto.physarium.Event.prototype.getVideo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVideo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.setVideo = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.physarium.Event.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.clearVideo = function() {
  return jspb.Message.setOneofField(this, 2, proto.physarium.Event.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.physarium.Event.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string step = 3;
 * @return {string}
 */
proto.physarium.Event.prototype.getStep = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.setStep = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.physarium.Event.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.physarium.Event} returns this
 */
proto.physarium.Event.prototype.clearStep = function() {
  return jspb.Message.setOneofField(this, 3, proto.physarium.Event.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.physarium.Event.prototype.hasStep = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.physarium);
